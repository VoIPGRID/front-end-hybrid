(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
(function() {

  var supportCustomEvent = window.CustomEvent;
  if (!supportCustomEvent || typeof supportCustomEvent == 'object') {
    supportCustomEvent = function CustomEvent(event, x) {
      x = x || {};
      var ev = document.createEvent('CustomEvent');
      ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);
      return ev;
    };
    supportCustomEvent.prototype = window.Event.prototype;
  }

  /**
   * Finds the nearest <dialog> from the passed element.
   *
   * @param {Element} el to search from
   * @return {HTMLDialogElement} dialog found
   */
  function findNearestDialog(el) {
    while (el) {
      if (el.nodeName.toUpperCase() == 'DIALOG') {
        return /** @type {HTMLDialogElement} */ (el);
      }
      el = el.parentElement;
    }
    return null;
  }

  /**
   * Blur the specified element, as long as it's not the HTML body element.
   * This works around an IE9/10 bug - blurring the body causes Windows to
   * blur the whole application.
   *
   * @param {Element} el to blur
   */
  function safeBlur(el) {
    if (el && el.blur && el != document.body) {
      el.blur();
    }
  }

  /**
   * @param {!NodeList} nodeList to search
   * @param {Node} node to find
   * @return {boolean} whether node is inside nodeList
   */
  function inNodeList(nodeList, node) {
    for (var i = 0; i < nodeList.length; ++i) {
      if (nodeList[i] == node) {
        return true;
      }
    }
    return false;
  }

  /**
   * @param {!HTMLDialogElement} dialog to upgrade
   * @constructor
   */
  function dialogPolyfillInfo(dialog) {
    this.dialog_ = dialog;
    this.replacedStyleTop_ = false;
    this.openAsModal_ = false;

    // Set a11y role. Browsers that support dialog implicitly know this already.
    if (!dialog.hasAttribute('role')) {
      dialog.setAttribute('role', 'dialog');
    }

    dialog.show = this.show.bind(this);
    dialog.showModal = this.showModal.bind(this);
    dialog.close = this.close.bind(this);

    if (!('returnValue' in dialog)) {
      dialog.returnValue = '';
    }

    this.maybeHideModal = this.maybeHideModal.bind(this);
    if ('MutationObserver' in window) {
      // IE11+, most other browsers.
      var mo = new MutationObserver(this.maybeHideModal);
      mo.observe(dialog, { attributes: true, attributeFilter: ['open'] });
    } else {
      dialog.addEventListener('DOMAttrModified', this.maybeHideModal);
    }
    // Note that the DOM is observed inside DialogManager while any dialog
    // is being displayed as a modal, to catch modal removal from the DOM.

    Object.defineProperty(dialog, 'open', {
      set: this.setOpen.bind(this),
      get: dialog.hasAttribute.bind(dialog, 'open')
    });

    this.backdrop_ = document.createElement('div');
    this.backdrop_.className = 'backdrop';
    this.backdropClick_ = this.backdropClick_.bind(this);
  }

  dialogPolyfillInfo.prototype = {

    get dialog() {
      return this.dialog_;
    },

    /**
     * Maybe remove this dialog from the modal top layer. This is called when
     * a modal dialog may no longer be tenable, e.g., when the dialog is no
     * longer open or is no longer part of the DOM.
     */
    maybeHideModal: function() {
      if (!this.openAsModal_) { return; }
      if (this.dialog_.hasAttribute('open') &&
          document.body.contains(this.dialog_)) { return; }

      this.openAsModal_ = false;
      this.dialog_.style.zIndex = '';

      // This won't match the native <dialog> exactly because if the user set
      // top on a centered polyfill dialog, that top gets thrown away when the
      // dialog is closed. Not sure it's possible to polyfill this perfectly.
      if (this.replacedStyleTop_) {
        this.dialog_.style.top = '';
        this.replacedStyleTop_ = false;
      }

      // Optimistically clear the modal part of this <dialog>.
      this.backdrop_.removeEventListener('click', this.backdropClick_);
      if (this.backdrop_.parentElement) {
        this.backdrop_.parentElement.removeChild(this.backdrop_);
      }
      dialogPolyfill.dm.removeDialog(this);
    },

    /**
     * @param {boolean} value whether to open or close this dialog
     */
    setOpen: function(value) {
      if (value) {
        this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');
      } else {
        this.dialog_.removeAttribute('open');
        this.maybeHideModal();  // nb. redundant with MutationObserver
      }
    },

    /**
     * Handles clicks on the fake .backdrop element, redirecting them as if
     * they were on the dialog itself.
     *
     * @param {!Event} e to redirect
     */
    backdropClick_: function(e) {
      var redirectedEvent = document.createEvent('MouseEvents');
      redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,
          e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,
          e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);
      this.dialog_.dispatchEvent(redirectedEvent);
      e.stopPropagation();
    },

    /**
     * Focuses on the first focusable element within the dialog. This will always blur the current
     * focus, even if nothing within the dialog is found.
     */
    focus_: function() {
      // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.
      var target = this.dialog_.querySelector('[autofocus]:not([disabled])');
      if (!target) {
        // Note that this is 'any focusable area'. This list is probably not exhaustive, but the
        // alternative involves stepping through and trying to focus everything.
        var opts = ['button', 'input', 'keygen', 'select', 'textarea'];
        var query = opts.map(function(el) {
          return el + ':not([disabled])';
        });
        // TODO(samthor): tabindex values that are not numeric are not focusable.
        query.push('[tabindex]:not([disabled]):not([tabindex=""])');  // tabindex != "", not disabled
        target = this.dialog_.querySelector(query.join(', '));
      }
      safeBlur(document.activeElement);
      target && target.focus();
    },

    /**
     * Sets the zIndex for the backdrop and dialog.
     *
     * @param {number} backdropZ
     * @param {number} dialogZ
     */
    updateZIndex: function(backdropZ, dialogZ) {
      this.backdrop_.style.zIndex = backdropZ;
      this.dialog_.style.zIndex = dialogZ;
    },

    /**
     * Shows the dialog. If the dialog is already open, this does nothing.
     */
    show: function() {
      if (!this.dialog_.open) {
        this.setOpen(true);
        this.focus_();
      }
    },

    /**
     * Show this dialog modally.
     */
    showModal: function() {
      if (this.dialog_.hasAttribute('open')) {
        throw new Error('Failed to execute \'showModal\' on dialog: The element is already open, and therefore cannot be opened modally.');
      }
      if (!document.body.contains(this.dialog_)) {
        throw new Error('Failed to execute \'showModal\' on dialog: The element is not in a Document.');
      }
      if (!dialogPolyfill.dm.pushDialog(this)) {
        throw new Error('Failed to execute \'showModal\' on dialog: There are too many open modal dialogs.');
      }
      this.show();
      this.openAsModal_ = true;

      // Optionally center vertically, relative to the current viewport.
      if (dialogPolyfill.needsCentering(this.dialog_)) {
        dialogPolyfill.reposition(this.dialog_);
        this.replacedStyleTop_ = true;
      } else {
        this.replacedStyleTop_ = false;
      }

      // Insert backdrop.
      this.backdrop_.addEventListener('click', this.backdropClick_);
      this.dialog_.parentNode.insertBefore(this.backdrop_,
          this.dialog_.nextSibling);
    },

    /**
     * Closes this HTMLDialogElement. This is optional vs clearing the open
     * attribute, however this fires a 'close' event.
     *
     * @param {string=} opt_returnValue to use as the returnValue
     */
    close: function(opt_returnValue) {
      if (!this.dialog_.hasAttribute('open')) {
        throw new Error('Failed to execute \'close\' on dialog: The element does not have an \'open\' attribute, and therefore cannot be closed.');
      }
      this.setOpen(false);

      // Leave returnValue untouched in case it was set directly on the element
      if (opt_returnValue !== undefined) {
        this.dialog_.returnValue = opt_returnValue;
      }

      // Triggering "close" event for any attached listeners on the <dialog>.
      var closeEvent = new supportCustomEvent('close', {
        bubbles: false,
        cancelable: false
      });
      this.dialog_.dispatchEvent(closeEvent);
    }

  };

  var dialogPolyfill = {};

  dialogPolyfill.reposition = function(element) {
    var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
    var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;
    element.style.top = Math.max(scrollTop, topValue) + 'px';
  };

  dialogPolyfill.isInlinePositionSetByStylesheet = function(element) {
    for (var i = 0; i < document.styleSheets.length; ++i) {
      var styleSheet = document.styleSheets[i];
      var cssRules = null;
      // Some browsers throw on cssRules.
      try {
        cssRules = styleSheet.cssRules;
      } catch (e) {}
      if (!cssRules)
        continue;
      for (var j = 0; j < cssRules.length; ++j) {
        var rule = cssRules[j];
        var selectedNodes = null;
        // Ignore errors on invalid selector texts.
        try {
          selectedNodes = document.querySelectorAll(rule.selectorText);
        } catch(e) {}
        if (!selectedNodes || !inNodeList(selectedNodes, element))
          continue;
        var cssTop = rule.style.getPropertyValue('top');
        var cssBottom = rule.style.getPropertyValue('bottom');
        if ((cssTop && cssTop != 'auto') || (cssBottom && cssBottom != 'auto'))
          return true;
      }
    }
    return false;
  };

  dialogPolyfill.needsCentering = function(dialog) {
    var computedStyle = window.getComputedStyle(dialog);
    if (computedStyle.position != 'absolute') {
      return false;
    }

    // We must determine whether the top/bottom specified value is non-auto.  In
    // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but
    // Firefox returns the used value. So we do this crazy thing instead: check
    // the inline style and then go through CSS rules.
    if ((dialog.style.top != 'auto' && dialog.style.top != '') ||
        (dialog.style.bottom != 'auto' && dialog.style.bottom != ''))
      return false;
    return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);
  };

  /**
   * @param {!Element} element to force upgrade
   */
  dialogPolyfill.forceRegisterDialog = function(element) {
    if (element.showModal) {
      console.warn('This browser already supports <dialog>, the polyfill ' +
          'may not work correctly', element);
    }
    if (element.nodeName.toUpperCase() != 'DIALOG') {
      throw new Error('Failed to register dialog: The element is not a dialog.');
    }
    new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));
  };

  /**
   * @param {!Element} element to upgrade, if necessary
   */
  dialogPolyfill.registerDialog = function(element) {
    if (!element.showModal) {
      dialogPolyfill.forceRegisterDialog(element);
    }
  };

  /**
   * @constructor
   */
  dialogPolyfill.DialogManager = function() {
    /** @type {!Array<!dialogPolyfillInfo>} */
    this.pendingDialogStack = [];

    // The overlay is used to simulate how a modal dialog blocks the document.
    // The blocking dialog is positioned on top of the overlay, and the rest of
    // the dialogs on the pending dialog stack are positioned below it. In the
    // actual implementation, the modal dialog stacking is controlled by the
    // top layer, where z-index has no effect.
    this.overlay = document.createElement('div');
    this.overlay.className = '_dialog_overlay';
    this.overlay.addEventListener('click', function(e) {
      e.stopPropagation();
    });

    this.handleKey_ = this.handleKey_.bind(this);
    this.handleFocus_ = this.handleFocus_.bind(this);
    this.handleRemove_ = this.handleRemove_.bind(this);

    this.zIndexLow_ = 100000;
    this.zIndexHigh_ = 100000 + 150;
  };

  /**
   * @return {Element} the top HTML dialog element, if any
   */
  dialogPolyfill.DialogManager.prototype.topDialogElement = function() {
    if (this.pendingDialogStack.length) {
      var t = this.pendingDialogStack[this.pendingDialogStack.length - 1];
      return t.dialog;
    }
    return null;
  };

  /**
   * Called on the first modal dialog being shown. Adds the overlay and related
   * handlers.
   */
  dialogPolyfill.DialogManager.prototype.blockDocument = function() {
    document.body.appendChild(this.overlay);
    document.body.addEventListener('focus', this.handleFocus_, true);
    document.addEventListener('keydown', this.handleKey_);
    document.addEventListener('DOMNodeRemoved', this.handleRemove_);
  };

  /**
   * Called on the first modal dialog being removed, i.e., when no more modal
   * dialogs are visible.
   */
  dialogPolyfill.DialogManager.prototype.unblockDocument = function() {
    document.body.removeChild(this.overlay);
    document.body.removeEventListener('focus', this.handleFocus_, true);
    document.removeEventListener('keydown', this.handleKey_);
    document.removeEventListener('DOMNodeRemoved', this.handleRemove_);
  };

  dialogPolyfill.DialogManager.prototype.updateStacking = function() {
    var zIndex = this.zIndexLow_;

    for (var i = 0; i < this.pendingDialogStack.length; i++) {
      if (i == this.pendingDialogStack.length - 1) {
        this.overlay.style.zIndex = zIndex++;
      }
      this.pendingDialogStack[i].updateZIndex(zIndex++, zIndex++);
    }
  };

  dialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {
    var candidate = findNearestDialog(/** @type {Element} */ (event.target));
    if (candidate != this.topDialogElement()) {
      event.preventDefault();
      event.stopPropagation();
      safeBlur(/** @type {Element} */ (event.target));
      // TODO: Focus on the browser chrome (aka document) or the dialog itself
      // depending on the tab direction.
      return false;
    }
  };

  dialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {
    if (event.keyCode == 27) {
      event.preventDefault();
      event.stopPropagation();
      var cancelEvent = new supportCustomEvent('cancel', {
        bubbles: false,
        cancelable: true
      });
      var dialog = this.topDialogElement();
      if (dialog.dispatchEvent(cancelEvent)) {
        dialog.close();
      }
    }
  };

  dialogPolyfill.DialogManager.prototype.handleRemove_ = function(event) {
    if (event.target.nodeName.toUpperCase() != 'DIALOG') { return; }

    var dialog = /** @type {HTMLDialogElement} */ (event.target);
    if (!dialog.open) { return; }

    // Find a dialogPolyfillInfo which matches the removed <dialog>.
    this.pendingDialogStack.some(function(dpi) {
      if (dpi.dialog == dialog) {
        // This call will clear the dialogPolyfillInfo on this DialogManager
        // as a side effect.
        dpi.maybeHideModal();
        return true;
      }
    });
  };

  /**
   * @param {!dialogPolyfillInfo} dpi
   * @return {boolean} whether the dialog was allowed
   */
  dialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {
    var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;
    if (this.pendingDialogStack.length >= allowed) {
      return false;
    }
    this.pendingDialogStack.push(dpi);
    if (this.pendingDialogStack.length == 1) {
      this.blockDocument();
    }
    this.updateStacking();
    return true;
  };

  /**
   * @param {dialogPolyfillInfo} dpi
   */
  dialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {
    var index = this.pendingDialogStack.indexOf(dpi);
    if (index == -1) { return; }

    this.pendingDialogStack.splice(index, 1);
    this.updateStacking();
    if (this.pendingDialogStack.length == 0) {
      this.unblockDocument();
    }
  };

  dialogPolyfill.dm = new dialogPolyfill.DialogManager();

  /**
   * Global form 'dialog' method handler. Closes a dialog correctly on submit
   * and possibly sets its return value.
   */
  document.addEventListener('submit', function(ev) {
    var target = ev.target;
    if (!target || !target.hasAttribute('method')) { return; }
    if (target.getAttribute('method').toLowerCase() != 'dialog') { return; }
    ev.preventDefault();

    var dialog = findNearestDialog(/** @type {Element} */ (ev.target));
    if (!dialog) { return; }

    // FIXME: The original event doesn't contain the element used to submit the
    // form (if any). Look in some possible places.
    var returnValue;
    var cands = [document.activeElement, ev.explicitOriginalTarget];
    var els = ['BUTTON', 'INPUT'];
    cands.some(function(cand) {
      if (cand && cand.form == ev.target && els.indexOf(cand.nodeName.toUpperCase()) != -1) {
        returnValue = cand.value;
        return true;
      }
    });
    dialog.close(returnValue);
  }, true);

  dialogPolyfill['forceRegisterDialog'] = dialogPolyfill.forceRegisterDialog;
  dialogPolyfill['registerDialog'] = dialogPolyfill.registerDialog;

  if (typeof define === 'function' && 'amd' in define) {
    // AMD support
    define(function() { return dialogPolyfill; });
  } else if (typeof module === 'object' && typeof module['exports'] === 'object') {
    // CommonJS support
    module['exports'] = dialogPolyfill;
  } else {
    // all others
    window['dialogPolyfill'] = dialogPolyfill;
  }
})();

},{}],2:[function(require,module,exports){
/*! matchMedia() polyfill addListener/removeListener extension. Author & copyright (c) 2012: Scott Jehl. Dual MIT/BSD license */
(function(){
    // Bail out for browsers that have addListener support
    if (window.matchMedia && window.matchMedia('all').addListener) {
        return false;
    }

    var localMatchMedia = window.matchMedia,
        hasMediaQueries = localMatchMedia('only all').matches,
        isListening     = false,
        timeoutID       = 0,    // setTimeout for debouncing 'handleChange'
        queries         = [],   // Contains each 'mql' and associated 'listeners' if 'addListener' is used
        handleChange    = function(evt) {
            // Debounce
            clearTimeout(timeoutID);

            timeoutID = setTimeout(function() {
                for (var i = 0, il = queries.length; i < il; i++) {
                    var mql         = queries[i].mql,
                        listeners   = queries[i].listeners || [],
                        matches     = localMatchMedia(mql.media).matches;

                    // Update mql.matches value and call listeners
                    // Fire listeners only if transitioning to or from matched state
                    if (matches !== mql.matches) {
                        mql.matches = matches;

                        for (var j = 0, jl = listeners.length; j < jl; j++) {
                            listeners[j].call(window, mql);
                        }
                    }
                }
            }, 30);
        };

    window.matchMedia = function(media) {
        var mql         = localMatchMedia(media),
            listeners   = [],
            index       = 0;

        mql.addListener = function(listener) {
            // Changes would not occur to css media type so return now (Affects IE <= 8)
            if (!hasMediaQueries) {
                return;
            }

            // Set up 'resize' listener for browsers that support CSS3 media queries (Not for IE <= 8)
            // There should only ever be 1 resize listener running for performance
            if (!isListening) {
                isListening = true;
                window.addEventListener('resize', handleChange, true);
            }

            // Push object only if it has not been pushed already
            if (index === 0) {
                index = queries.push({
                    mql         : mql,
                    listeners   : listeners
                });
            }

            listeners.push(listener);
        };

        mql.removeListener = function(listener) {
            for (var i = 0, il = listeners.length; i < il; i++){
                if (listeners[i] === listener){
                    listeners.splice(i, 1);
                }
            }
        };

        return mql;
    };
}());

},{}],3:[function(require,module,exports){
/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license */

window.matchMedia || (window.matchMedia = function() {
    "use strict";

    // For browsers that support matchMedium api such as IE 9 and webkit
    var styleMedia = (window.styleMedia || window.media);

    // For those that don't support matchMedium
    if (!styleMedia) {
        var style       = document.createElement('style'),
            script      = document.getElementsByTagName('script')[0],
            info        = null;

        style.type  = 'text/css';
        style.id    = 'matchmediajs-test';

        script.parentNode.insertBefore(style, script);

        // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
        info = ('getComputedStyle' in window) && window.getComputedStyle(style, null) || style.currentStyle;

        styleMedia = {
            matchMedium: function(media) {
                var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

                // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
                if (style.styleSheet) {
                    style.styleSheet.cssText = text;
                } else {
                    style.textContent = text;
                }

                // Test if media query is true or false
                return info.width === '1px';
            }
        };
    }

    return function(media) {
        return {
            matches: styleMedia.matchMedium(media || 'all'),
            media: media || 'all'
        };
    };
}());

},{}],4:[function(require,module,exports){
'use strict';

require('./lib/polyfills');
require('./lib/analytics');

const Dialogs = require('./lib/dialogs');
const Login = require('./lib/login');
const SessionSecurity = require('./lib/session_security');
const Utils = require('./lib/utils');

/**
 * The main application, which is included on all pages.
 */
class App extends EventEmitter {

    constructor() {
        super();
        this.widgets = {};
        this.dialogs = new Dialogs();
        this.utils = new Utils();
        this.browser = {
            isIos: false,
            isIe: false,
            isAndroid: false,
            isWebview: false,
        };
        // Apply body classes for some browsers.
        if (navigator.userAgent.match(/(iPod|iPhone|iPad)/)) {
            $(document.body).addClass('ios');
            this.browser.isIos = true;
            // Safari includes `Version`, UIWebView doesn't..
            if (navigator.userAgent.match(/.*AppleWebKit(?!.*Version)/i)) {
                $(document.body).addClass('webview');
                this.browser.isWebview = true;
            }
        } else if (navigator.userAgent.match(/(Trident)/)) {
            $(document.body).addClass('ie');
            this.browser.isIe = true;
        } else if (navigator.userAgent.match(/(Android)/)) {
            $(document.body).addClass('android');
            this.browser.isAndroid = true;
            // Android WebView adds `Version` to the useragent.
            // See https://developer.chrome.com/multidevice/user-agent#webview_user_agent
            if (navigator.userAgent.match(/(Version)/i)) {
                $(document.body).addClass('webview');
                this.browser.isWebview = true;
            }
        }

        if (context.user.id === 'None') {
            // Anonymous users.
            new Login(this);
        } else {
            // This only applies to logged in users.

            // Includes CSRF token when doing a $.post to a Django view.
            $.ajaxSetup({
                beforeSend: function(xhr, settings) {
                    if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {
                        // Only send the token to relative URLs i.e. locally.
                        xhr.setRequestHeader('X-CSRFToken', $.cookie('csrftoken'));
                    }
                },
            });

            $.ajaxPrefilter(function( options, originalOptions, jqXHR ) {
                // TODO: Make script injection work async.
                // options.async = true;
                // Don't add a timestamp to inject scripts, so they can be cached.
                if (options.dataType === 'script' || originalOptions.dataType === 'script' ) {
                    options.cache = true;
                }
            });
            // Change all select elements to select3 widgets.
            this.styleSelects($('.select3'));

            $(() => {
                if (context.sessionSecurity) {
                    new SessionSecurity({
                        pingUrl: context.sessionSecurity.pingUrl,
                        // Supress default events that trigger the session to continue.
                        events: [],
                        warnAfter: context.sessionSecurity.warnAfter,
                        expireAfter: context.sessionSecurity.expireAfter,
                        expireTitle: context.sessionSecurity.expireTitle,
                    });
                }
                this.events();
                // app instance is ready.
                this.emit('ready');
            });
        }
    }


    /**
     * Generic event handlers used throughout the application.
     */
    events() {
        // Handle close events on alert messages.
        $('.container').on('closed', '.alert-closeable[class*="alert-message-"]', function() {
            var classes = $(this).attr('class');
            var pk = classes.match(/alert-message-(\d+)/)[1];
            $.cookie('message-closed-' + pk, true);
        });


        // Don't throw around popups in case of issues with datatables.
        if ($.fn.dataTableExt) {
            // Default 'alert'.
            $.fn.dataTableExt.sErrMode = 'throw';
        }

        // This is a Bootstrap 2.3.2 fix for dropdown navigation on touch devices.
        // https://github.com/twbs/bootstrap/issues/4550#issuecomment-21361314
        $('.dropdown-toggle').click(function(e) {
            e.preventDefault();
            setTimeout($.proxy(function() {
                if ('ontouchstart' in document.documentElement) {
                    $(this).siblings('.dropdown-backdrop').off().remove();
                }
            }, this), 0);
        });

        $('body').on('click', '.js-detect-form-changes .cancel', (e) => {
            var hasChanged = false;
            var message;

            var form = $(e.currentTarget).closest('form');
            var originalData = $(form).data('original-form-data');
            if (!!originalData && $(form).serialize() !== originalData) {
                hasChanged = true;
            }

            if (hasChanged) {
                message = $(e.currentTarget).data('cancel-message');
                if (!message) {
                    message = gettext('You have changed this form, do you want to discard these changes?');
                }
                return confirm(message);
            }

            return null;
        });

        $('.btn-group-toggle').on('click', function() {
            $(this).toggleClass('open');
            $(this).next('.btn-group').toggleClass('open');
        });

        // Add possiblity to click on the calendar icon to open the datepicker.
        $('input[data-bootstrap-widget="datepicker"]').next('.vg-form-append-addon').on('click', (e) => {
            $(e.currentTarget).parent().find('input').datepicker('show').focus();
        });

        // Prevent slugish animation on touch devices.
        if (('ontouchstart' in window) ) {
            $('[data-toggle="collapse"]').each(function() {
                $($(this).data('target')).addClass('js-no-transition');
            });
        }

        // Input prepend en append met input-block-level.
        $('.input-prepend input.input-block-level, .input-append input.input-block-level').each(function() {
            var input = $(this);

            // In front of input = padding left.
            input.prevAll().each(function() {
                input.css('padding-left', '+=' + $(this).outerWidth(true) + 'px');
            });

            // After input = padding left.
            input.nextAll().each(function() {
                input.css('padding-right', '+=' + $(this).outerWidth(true) + 'px');
            });

            // Remove the default 27px.
            input.css({
                'padding-left': '-=27px',
                'padding-right': '-=27px',
            });
        });

        // Activate bootstrap tooltip plugins.
        $('[data-toggle="tooltip"][title]').tooltip({container: 'body', html: true});

        // Activate pop-up to confirm actions for anchors and (submit) buttons.
        $('a[data-confirm-message], input[type="submit"][data-confirm-message], button[data-confirm-message]').on('click', function() {
            return confirm($(this).data('confirm-message'));
        });

        // Prevent double submission.
        $('form.js-prevent-double-submission').preventDoubleSubmission();

        // Detect changes to forms and show popup to confirm a cancel action.
        $('.js-detect-form-changes').detectFormChanges();

        $('#js-select-brand').on('change', function(e) {
            var brandId = $(this).val();
            if (brandId) {
                $.post('/utils/branding/' + brandId + '/', function(data) {
                    location.reload();
                });
            }
        });
    }


    /**
     * Applies bootstrap-select widget on selects.
     * @param {$} selector - A Jquery selector to apply it on.
     */
    styleSelects(selector, options) {
        var width;

        // This is not the most efficient way to format options to include icons,
        // but it's fast enough and easy to implement.
        $('.country-select option').each(function() {
            $(this).attr('data-icon', 'flag ' + $(this).val());
        });

        let defaultOptions =  {
            iconBase: 'icon',
            tickIcon: 'icon-ok',
            showTick: true,
            showIcon: true,
            noneSelectedText: django.gettext('Nothing selected'),
            selectedTextFormat: 'count > 1',
            noneResultsText: django.gettext('No results'),
            countSelectedText: django.gettext('{0} of {1} selected'),
            maxOptionsText: [
                django.gettext('Limit reached ({n} {var} max)'),
                django.gettext('Group limit reached ({n} {var} max)'),
                ['items', 'item'],
            ],
            selectAllText: django.gettext('Select All'),
            deselectAllText: django.gettext('Deselect All'),
            multipleSeparator: ', ',
            width: width,
            dropupAuto: false,
        };
        $.extend(defaultOptions, options);
        $(selector).each((i, el) => {
            if ($(el).find('option').length > 10) {
                let liveSearch = $(el).data('live-search');
                if (liveSearch === undefined) {
                    liveSearch = true;
                }
                let actionsBox = $(el).data('actions-box');
                if (actionsBox === undefined) {
                    actionsBox = true;
                }

                $(el).select3($.extend({
                    liveSearch: liveSearch,
                    actionsBox: actionsBox,
                    size: 5,
                }, defaultOptions));
            } else if ($(el).find('option').length === 0) {
                $(el).prop('disabled', true);
                $(el).attr('title', django.gettext('No results'));
                $(el).select3(defaultOptions);
                $(el).on('change', (e) => {
                    if ($(e.currentTarget).find('option').length > 0) {
                        $(e.currentTarget).prop('disabled', false).select3('refresh');
                    }
                });
            } else {
                $(el).select3(defaultOptions);
            }

            // Set all options to disabled individually when an element has the readonly attribute.
            if ($(el).attr('readonly')) {
                $(el).find('option').prop('disabled', true);
                $(el).select3('refresh');
            }
        });
    }

    /**
     * Register a callback on the 'beforeunload' event.
     * @param callback
     */
    onbeforeunload(callback) {
        var isOnIOS = $('body').hasClass('ios');
        var event = isOnIOS ? 'pagehide' : 'beforeunload';
        $(window).on(event, callback);
    }
}

// Initialize application namespace as soon as possible.
window.app = new App();

},{"./lib/analytics":5,"./lib/dialogs":6,"./lib/login":7,"./lib/polyfills":8,"./lib/session_security":9,"./lib/utils":10}],5:[function(require,module,exports){
'use strict';


/**
 * Google analytics event tracking delegate for elements with a `ga-event`
 * class. The element must include a `data-category` attribute and may
 * contain a `data-event`, `data-label` and `data-value` attribute.
 */
$(document).on('click hidden shown expired', '.ga-event', function(event) {
    var data, eventData;
    // Prevent other .ga-events to get triggered by bubbling.
    event.stopPropagation();

    data = $(this).data();
    eventData = {
        hitType: 'event',
        eventCategory: data.category,
        // Normally the raw event name.
        eventAction: event.type,
    };

    if (data.event) {
        // Allow to override `eventAction` from `data-event`. This is useful
        // to keep ambigious events like `expired` consistent when being
        // caused by another event, e.g. `click . The raw event is then
        // represented by `eventLabel` instead of `eventAction`.
        eventData.eventAction = data.event;
        eventData.eventLabel = event.type;
    } else if (data.label) {
        // `eventLabel` is an optional field.
        eventData.eventLabel = data.label;
    }

    if (data.value) {
        // `eventValue` is an optional field.
        eventData.eventValue = data.value;
    }

    if (window.ga) ga('send', eventData);
});


/**
 * Track form errors as events in Google analytics
 */
$(document).on('ready', function() {
    if ($('.vg-form-group.error').length) {
        $('.vg-form-group.error').each(function() {
            var field = $(this).find('[name]');
            if (window.ga && field.length) {
                ga('send', 'event', 'errors', 'form error', field.attr('name'));
            }
        });
    }
});


/**
 * Google analytics virtual pageview tracking delegate for elements
 * with a `ga-pageview class. The element attibute 'href' is used
 * as URL in the ga 'send pageview' event.
 */
$(document).on('click', '.ga-pageview', function(event) {
    var tabLocation;

    // Prevent other .ga-pageview to get triggered by bubbling.
    event.stopPropagation();

    if ($(this).attr('href').length) {
        tabLocation = $(this).attr('href');
        ga('send', 'pageview', window.location.pathname + tabLocation);
    }
});

},{}],6:[function(require,module,exports){
'use strict';

/**
 * Additional sugar on top of the (polyfill) dialog element.
 */
class Dialogs {
    constructor() {
        $(() => {
            // Register all dialog elements in the DOM.
            $('dialog').each((i, el) => {
                dialogPolyfill.registerDialog(el);
            });

            // Use generic js-dialog-close class to close any dialog with.
            $('body').on('click', 'dialog .js-dialog-close', (e) => {
                $(e.currentTarget).closest('dialog').get(0).close();
            });

            // This cancel event listener fires an additional event, which is
            // also triggered by hitting escape.
            $('body').on('click', 'dialog .js-dialog-cancel', (e) => {
                let event = new CustomEvent('cancel', {});
                $(e.currentTarget).closest('dialog').get(0).dispatchEvent(event);
                $(e.currentTarget).closest('dialog').get(0).close();
            });
        });
    }
}

module.exports = Dialogs;

},{}],7:[function(require,module,exports){
'use strict';


var PING_INTERVAL = 10000;

/**
 * Login handles all client-side actions that may be involved with the
 * login page and process.
 */
class Login {

    constructor(app) {
        this.app = app;

        this.redirect();
        // Last recorded activity datetime.
        this.activity();

        // Events that would trigger an activity.
        this.events = ['mousemove', 'scroll', 'keyup', 'click'];

        // Bind activity events to update this.lastActivity.
        for (let i = 0; i < this.events.length; i++) {
            $(document)[this.events[i]]($.proxy(this.activity, this));
        }

        /**
         * Disable the interval in case the redirect takes longer than
         * PING_INTERVAL.
         */
        window.onbeforeunload = (e) => {
            clearInterval(this.timerId);
        };

        $.support.placeholder = (function() {
            return 'placeholder' in document.createElement('input');
        })();

        if (!$.support.placeholder) {
            $('.field').find('label').show();
        }
        // Autofocus the email field, but not for touchscreen devices.
        if (!('ontouchstart' in window)) {
            $('#id_username').focus();
        }

        // Save the cookie so we can check if it changes.
        this.cookieCsrfToken = $.cookie('csrftoken');
    }


    /**
     * Sets the current time as the latest activity. Called on user-events.
     */
    activity() {
        this.lastActivity = new Date();
    }


    /**
     * The next url param may contain a html escaped queryString
     * that contains directions like the reason of logging out,
     * e.g. `/user/login/?next=/partner/%3Freason%3Dautologout`.
     * Show in this case a warning message about the redirect reason and
     * rewrite the url in the navigation bar without the escaped queryString.
     */
    redirect() {
        var _this = this;
        var navUrl, nextOptions, nextQueryString, params;

        this.nextUrl = '/';
        if (window.location.search) {
            params = this.app.utils.parseParams(window.location.search);
            if (params.next) {
                this.nextUrl = params.next;
                if (params.next.includes('?')) {
                    // Nested querystring. Get the next one.
                    nextQueryString = params.next.substr(params.next.indexOf('?'), params.next.length - 1);
                    // Get the next path without the queryString.
                    this.nextUrl = params.next.replace(nextQueryString, '');
                    // Parse the next options to an object.
                    nextOptions = this.app.utils.parseParams(nextQueryString);

                    // Trigger appropriate message when the url indicates the
                    // logout was caused by autologout.
                    if (nextOptions.autologout) {
                        $('.js-autologout-warning').show();
                        // Remove login params from next url.
                        delete nextOptions.autologout;
                        // Keep pinging the server every 10 seconds whether
                        // we are still logged in or not. Used to redirect
                        // to the correct next url in other tabs.
                        this.timerId = setTimeout(_this.ping, PING_INTERVAL);
                    }

                    if (window.history && window.history.replaceState) {
                        if (Object.keys(nextOptions).length) {
                            this.nextUrl += encodeURIComponent(`?${$.param(nextOptions)}`);
                        }

                        navUrl = `${window.location.pathname}?next=${this.nextUrl}`;
                        history.replaceState(null, null, navUrl);
                    }
                }
            }
        }

        // Bind handler to refresh the page after a change to the csrf token is
        // detected when this page is focused. If a user has authenticated
        // itself elsewhere, this will result in a redirect to whatever is in
        // next. Even if the user is not authenticated after a token change,
        // at least the login page is loaded with a new proper csrf token.
        $(document).on('visibilitychange', () => {
            if (!document.hidden) {
                if (this.cookieCsrfToken !== $.cookie('csrftoken')) {
                    $(document).off('visibilitychange');
                    window.location.reload(true);
                }
            }
        });
    }


    /**
     * Makes an XHR call to the session_security ping view to determine if
     * the browser is still logged out. Redirect to the next url if the
     * response indicates that the user is already logged in again. This is
     * used to autologin other tabs after they got expired.
     */
    ping() {
        // How long the login page has been inactive.
        var timeInactive = new Date() - this.lastActivity;

        // Do not ping if the tab is hidden or if it has been inactive longer
        // than SESSION_SECURITY_PINGVIEW_TIMEOUT.
        var pingviewTimeout = window.context.SESSION_SECURITY_PINGVIEW_TIMEOUT;
        if (document.hidden || timeInactive > pingviewTimeout * 1000) {
            return;
        }

        $.ajax(context.pingUrl, {
            cache: false,
            complete: (data) => {
                // data contains the inactivity in seconds since last activity
                // or "logout" if there is no session.
                if (data.responseText !== '"logout"') {
                    window.location = decodeURIComponent(this.nextUrl);
                }
            },
            dataType: 'json',
            type: 'get',
        });

        this.timerId = setTimeout(this.ping, PING_INTERVAL);
    }
}

module.exports = Login;

},{}],8:[function(require,module,exports){
'use strict';

// Mediaqueries polyfill required for IE < 11.
require('matchmedia-polyfill/matchMedia');
require('matchmedia-polyfill/matchMedia.addListener');

// Chrome's dialog element: required for all non-blink browsers.
window.dialogPolyfill = require('dialog-polyfill/dialog-polyfill');


/**
 * Replacement for `indexOf` when only using it to test for a substring.
 * Source: https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/String/includes
 */
if (!String.prototype.includes) {
    String.prototype.includes = function(search, start) {
        if (typeof start !== 'number') start = 0;
        if (start + search.length > this.length) {
            return false;
        }

        return this.indexOf(search, start) !== -1;
    };
}


/**
 * Replacement for `indexOf` when only using it to test for a string in an Array.
 * Source: https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Array/includes
 */
if (!Array.prototype.includes) {
    Array.prototype.includes = function(searchElement /*, fromIndex*/ ) {
        let O = Object(this);
        let len = parseInt(O.length, 10) || 0;
        if (len === 0) {
            return false;
        }
        let n = parseInt(arguments[1], 10) || 0;
        let currentElement, k;
        if (n >= 0) {
            k = n;
        } else {
            k = len + n;
            if (k < 0) {
                k = 0;
            }
        }
        while (k < len) {
            currentElement = O[k];
            if (searchElement === currentElement) {
                return true;
            }
            k++;
        }
        return false;
    };
}


/**
 * The startsWith() method determines whether a string begins with the characters
 * of another string, returning true or false as appropriate.
 * Source: https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
 */
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function(searchString, position) {
        position = position || 0;
        return this.substr(position, searchString.length) === searchString;
    };
}


Number.isInteger = Number.isInteger || function(value) {
    return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
};

},{"dialog-polyfill/dialog-polyfill":1,"matchmedia-polyfill/matchMedia":3,"matchmedia-polyfill/matchMedia.addListener":2}],9:[function(require,module,exports){
'use strict';


/**
 * Session security takes care of showing expiry warnings, keeping
 * in sync with server session expiration and redirecting the user
 * when it's logged out.
 */
class SessionSecurity {

    constructor(options) {
        // Cache the current title, so the tab title can be restored later.
        this.title = document.title;
        this.$warningDialog = $('#session-security-warning');
        this.warningDialog = this.$warningDialog.get(0);

        this.$timer = $('#session_timer');
        this.expireTitle = options.expireTitle;

        // Default behavior is to extend the session when the warning modal
        // is closed.
        this.warningDialog.addEventListener('close', () => {
            this.toggleSessionTimer(false);
            this.activityRegistered();
            document.title = this.title;
        });

        // Sync the session timer and state once when the modal is opened.
        this.$warningDialog.on('show', () => {

        });

        // Last recorded activity datetime.
        this.lastActivity = new Date();

        // Default events that would trigger an activity.
        // TODO: Make events update activity and sync server-side with proper
        // throttling.
        this.events = ['mousemove', 'scroll', 'keyup', 'click'];

        // Override default settings with provided options.
        $.extend(this, options);

        // Initialize timers.
        this.applyWarningOrExpire();
    }


    /**
     * Called when there has been no activity for more than expireAfter.
     */
    expire() {
        this.expired = true;
        // Build a url with querystring that includes logout reason.
        let nextParams = app.utils.parseParams(window.location.search);
        nextParams.autologout = 1;
        let nextUrl = '?next=' + encodeURIComponent(window.location.pathname + '?' + $.param(nextParams));
        window.location = context.sessionSecurity.logoutUrl + nextUrl;
    }


    /**
     * Shows the expire warning modal. Called when there has been no
     * activity for more than warnAfter seconds.
     */
    showWarning() {
        if (!this.$warningDialog.attr('open')) {
            this.toggleSessionTimer(true);
            this.warningDialog.showModal();
        }
    }


    /**
     * Hides the expire warning modal. Called to hide the warning, for example
     * if there has been activity on the server side - in another browser tab.
     */
    hideWarning() {
        if (this.$warningDialog.attr('open')) {
            this.warningDialog.close();
        }
    }


    /**
     * Called to reset the idle period.
     */
    activityRegistered() {
        this.lastActivity = new Date();
        this.ping();
        this.hideWarning();
    }


    /**
     * Hit the PingView with the idle time in seconds. Also used to sync
     * expiry warnings between multiple tabs/windows.
     */
    ping() {
        var idleFor = Math.floor((new Date() - this.lastActivity) / 1000);
        $.ajax(this.pingUrl, {
            data: {idleFor: idleFor},
            cache: false,
            success: (data) => {
                // data contains the inactivity in seconds since last activity.
                if (data === 'logout') {
                    // Emit kill event for listeners like analytics.
                    this.$warningDialog.trigger('expired');
                    return this.expire();
                }
                this.lastActivity = new Date();
                this.lastActivity.setSeconds(this.lastActivity.getSeconds() - data);
                this.applyWarningOrExpire();
            },
            error: (data) => {
                if (data.responseText === 'logout') {
                    return this.expire();
                }
                this.applyWarningOrExpire();
            },
            dataType: 'json',
            type: 'get',
        });
    }


    /**
     * Apply warning or expiry, setup next ping.
     */
    applyWarningOrExpire() {
        var idleFor, nextPing;
        // Cancel timeout if any, since we're going to make our own.
        clearTimeout(this.timeout);
        idleFor = Math.floor((new Date() - this.lastActivity) / 1000);
        if (idleFor >= this.expireAfter) {
            // The session is expired.
            this.$warningDialog.trigger('expired');
            return this.expire();
        } else if (idleFor >= this.warnAfter) {
            // Session expiry warning should be visible when idle for too long.
            // Do not open when already open, since this triggers the show
            // event again.
            this.showWarning();
            nextPing = this.expireAfter - idleFor;
        } else {
            // Same for hiding the modal.
            this.hideWarning();
            nextPing = this.warnAfter - idleFor;
        }
        $.proxy(this.ping, this);
        this.timeout = setTimeout($.proxy(this.ping, this), nextPing * 1000);
    }


    /**
     * Calculate the inactivity time and stuff it in the DOM.
     */
    setSessionTime() {
        var timerText;
        var expiryTime = new Date(this.lastActivity).setSeconds(this.lastActivity.getSeconds() + this.expireAfter);
        var min = Math.floor(((expiryTime - Date.now()) / 1000) / 60);
        var sec = Math.floor(((expiryTime - Date.now()) / 1000) % 60);
        if (sec >= 0 && min >= 0) {
            if (sec < 10) {
                sec = '0' + sec;
            }
            timerText = min + ':' + sec;
            this.$timer.text(timerText);
            document.title = this.expireTitle + ': ' + timerText;
        }
    }


    /**
     * Start an interval after waiting warnAfter seconds-1 to update
     * the timer in the dialog. The interval is started 1 second before the
     * countdown is required to ensure the session_timer always has a value.
     *
     * @param {Boolean} enabled: Enables or disables the session timer.
     */
    toggleSessionTimer(enabled) {
        var counter;
        // Make sure there never is more only one interval active.
        clearInterval(this.timerId);
        if (enabled) {
            counter = 0;
            this.setSessionTime();
            this.setSessionTime();
            this.timerId = setInterval(() => {
                this.setSessionTime();
                counter += 1;
                // Ping the server every 3 seconds if the warning modal is open
                // and the sessionTimer is active. This allows to sync multiple
                // tabs and keep the timer somewhat accurate.
                if (counter % 3 === 0) {
                    this.ping();
                }
            }, 1000);
        } else {
            clearInterval(this.timerId);
        }
    }
}

module.exports = SessionSecurity;

},{}],10:[function(require,module,exports){
'use strict';


class Utils {

    constructor() {

    }

    /**
     * Parses a queryString to a key/values.
     * @param {String} query - The queryString to parse.
     */
    parseParams(query) {
        var e, k, v;
        var re = /([^&=]+)=?([^&]*)/g;
        var decode = function(str) {
            return decodeURIComponent(str.replace(/\+/g, ' '));
        };
        var params = {};


        if (query) {
            if (query.substr(0, 1) === '?') {
                query = query.substr(1);
            }

            while ((e = re.exec(query))) {
                k = decode(e[1]);
                v = decode(e[2]);
                if (params[k] !== undefined) {
                    if (!$.isArray(params[k])) {
                        params[k] = [params[k]];
                    }
                    params[k].push(v);
                } else {
                    params[k] = v;
                }
            }
        }
        return params;
    }


    /**
     * Add parameter to url.
     *
     * Source: http://stackoverflow.com/a/8902584/3249408
     *
     * @param {String} url - The url that gets parameter added.
     * @param {String} name - Key of the query string parameter.
     * @param {String} value - Value of the query string parameter.
     */
    addQSParm(url, name, value) {
        var re = new RegExp('([\\?&]' + name + '=)([^&#]*)', '');

        function add(sep) {
            url += sep + name + '=' + encodeURIComponent(value);
        }

        function change() {
            url = url.replace(re, '$1' + encodeURIComponent(value));
        }
        // Check if there a query string already set.
        if (url.indexOf('?') === -1) {
            add('?');
        } else {
            // If param already exists, update.
            if (re.test(url)) {
                change();
            } else {
                add('&');
            }
        }
        return url;
    }


    /**
     * Read parameter from query string.
     *
     * Source: http://stackoverflow.com/a/901144/3249408
     *
     * @param {String} name - The name of the query string parameter.
     */
    getParameterByName(name) {
        let _name, regex, results;
        _name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        regex = new RegExp('[\\?&]' + _name + '=([^&#]*)');
        results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    }
}


module.exports = Utils;


/**
 * Used to throw an error when an es6 function argument is not provided
 * and the argument is required.
 */
Object.defineProperty(window, 'required', {
    get: function() {
        throw new Error('Missing parameter');
    },
});


/**
 * Reset form elements to an empty value.
 */
$.fn.clearForm = function() {
    return this.each(function() {
        var type = this.type;
        var tag = this.tagName.toLowerCase();

        // don't clear the security token
        if ($(this).attr('name') === 'csrfmiddlewaretoken') {
            return;
        }

        if (!$(this).attr('class') ||
            ($(this).attr('class') !== undefined && $(this).attr('class') !== false && $(this).attr('class').indexOf('keep_value') === -1)) {
            if (tag === 'form' || tag === 'fieldset') {
                $(':input', this).clearForm();
                return;
            }

            if (type === 'text' || type === 'password' || tag === 'textarea') {
                this.value = '';
            } else if (type === 'checkbox' || type === 'radio') {
                this.checked = false;
            } else if (tag === 'select') {
                $(this).val('');
            }
        }
    });
};


/**
 * Jquery plugin to prevent double submission of forms.
 */
$.fn.preventDoubleSubmission = function() {
    $(this).bind('submit', function(e) {
        var $form = $(this);

        if ($form.data('submitted') === true) {
            // Previously submitted - don't submit again.
            e.preventDefault();
        } else {
            // Mark it so that the next submit can be ignored.
            $form.data('submitted', true);
        }
    });

    // Keep chainability.
    return this;
};


/**
 * Jquery plugin to detect changes when canceling a form.
 */
$.fn.detectFormChanges = function() {
    return this.each(function(index, form) {
        $(form).data('original-form-data', $(this).serialize());
        if (!$(form).hasClass('js-detect-form-changes')) {
            $(form).addClass('js-detect-form-changes');
        }
    });
};

},{}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=data:application/json;base64,
