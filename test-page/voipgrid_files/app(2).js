(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){
'use strict';


var parentSelector = '.dataTables_wrapper, .scroll-x';


/**
 * This plugin makes sure that the list table header sticks to the top
 * of the screen when scrolling down.
 */
class FixedHeader {

    constructor(selector) {
        this.selector = $(selector);

        this.selector.css('position', 'relative');
        this.cloneThead();

        // Update positions when scrolling.
        FixedHeader.afnScroll.push(() => {
            this.scrollFixedHeader.call(this);
        });

        // FixedHeader also works on serverside datatables look-alike.
        if ($.fn.dataTable) {
            // Track datatable redraws (e.g. page changes).
            let dt = $.fn.dataTable.Api ? new $.fn.dataTable.Api(this.selector).settings()[0] : this.selector.fnSettings();
            if (dt) {
                dt.aoDrawCallback.unshift({
                    fn: () => {
                        this.updateClone.call(this);
                        this.scrollFixedHeader.call(this);
                    },
                    sName: 'FixedHeader',
                });
            }
        }

        // Set things right initially.
        this.updateClone();
        this.scrollFixedHeader();
        $(this.fixedThead).appendTo(this.selector);
        this.events();
    }


    events() {
        $(window).scroll(function() {
            for (let i = 0, iLen = FixedHeader.afnScroll.length; i < iLen; i++) {
                FixedHeader.afnScroll[i]();
            }
        });

        // Track table scrollling to the side on small screens.
        $('.dataTables_wrapper, .scroll-x').scroll(() => {
            if ($(this.fixedThead).css('position') === 'fixed') {
                let tableOffset = this.selector.offset();
                $(this.fixedThead).scrollLeft($(this).offset().left - tableOffset.left);
            }
        });

        // Track window resizing.
        $(window).resize(() => {
            this.updateClone.call(this);
            this.scrollFixedHeader.call(this);
        });
    }


    /**
     * Create a copy of the table head which is positioned according to the
     * scroll position.
     */
    cloneThead() {
        var thead = $('thead:first', this.selector);
        $(thead).width(this.selector.outerWidth());

        this.fixedThead = thead.clone(true).get(0);
        $(this.fixedThead).css('overflow-x', 'hidden');
        $('tr', this.fixedThead).css('display', 'block');
    }


    /**
     * Position the cloned table header according the page's scroll
     * position.
     * There are three scenarios:
     * - scroll position is above the table, does nothing or resets thead.
     * - scroll position is below the table, does nothing or resets thead.
     * - scroll position is in the middle of the table, does nothing or
     *     position thead based on the offset of the table.
     */
    scrollFixedHeader() {
        let tableOffset = this.selector.offset();
        let docScrollTop = $(document).scrollTop();
        let tbodyHeight = $('tbody', this.selector).height();

        if (tableOffset.top > docScrollTop) {
            // Above the table.
            $(this.fixedThead).css({
                'position': 'absolute',
                'top': '0px',
                'left': '0px',
                'box-sizing': 'unset',
            });
            $(this.fixedThead).scrollLeft(0);
        } else if (docScrollTop > tableOffset.top + tbodyHeight) {
            // Below the table.
            $(this.fixedThead).css({
                'position': 'absolute',
                'top': '0px',
                'left': '0px',
                'box-sizing': 'unset',
            });
            $(this.fixedThead).scrollLeft(0);
        } else {
            // 'Middle' of the table.
            let parentScrollLeft = this.selector.parent(parentSelector).offset().left;
            $(this.fixedThead).css({
                'position': 'fixed',
                'top': '0px',
                'box-sizing': 'unset',
                'left': parentScrollLeft + 'px',
            });

            // Scroll the same amount to the left as the tbody is visually.
            $(this.fixedThead).scrollLeft(parentScrollLeft - tableOffset.left);
        }

        // Add a negative tabindex to exclude the cloned header for tabbing.
        $(this.fixedThead).attr('tabindex', -1);
    }


    /**
     * Copy widths of the cloned thead's properties.from the original.
     */
    updateClone() {
        $(this.fixedThead)
            .width(this.selector.parent(parentSelector).width());

        $('tr', this.fixedThead)
            .width($('thead:first tr', this.selector).outerWidth());

        // Update styling on the cloned head to reflect styling for sorted
        // tables etc.
        let thWidths = [];
        let thClasses = [];
        $('thead:first > tr th', this.selector).each(function(index) {
            thWidths.push($(this).width());
            thClasses.push($(this).attr('class'));
        });

        // Set fixed widths for ths in the cloned thead.
        $('th', this.fixedThead).each(function(index) {
            $(this).width(thWidths[index]);
            $(this).attr('class', thClasses[index]);
        });
    }
}


/*
 * Variable: afnScroll
 * Purpose:  Array of functions that are to be used for the scrolling components
 * Scope:    FixedHeader
 */
FixedHeader.afnScroll = [];
$.fn.fixedHeader = FixedHeader;

module.exports = FixedHeader;

},{}],2:[function(require,module,exports){
'use strict';

const Pagination = require('./pagination');
const ServerPagination = require('./server_pagination');
const FixedHeader = require('../../lib/fixed_header');

/**
 * Filters widget helper that prevents the From date
 * to go beyond the To date.
 */
class List {

    constructor() {
        this.container = $('#js-filters');

        // Check whether the default from/to fields are available.
        this.from = $(this.container).find('input[name="period_from"]');
        this.to = $(this.container).find('input[name="period_to"]');
        if (!this.from.length && !this.to.length) {
            this.from = $(this.container).find('input[name="begin_date"]');
            this.to = $(this.container).find('input[name="end_date"]');
        }

        if (this.from.length && this.to.length) {
            this.events();
        }

        if (context.numberOfPages) {
            // Serverside pagination; no datatables here.
            new ServerPagination();
        } else {
            new Pagination('#js-paging_container table');
        }

        new FixedHeader('#js-paging_container table');
    }


    /**
     * Setup datepicker events; make sure that the 'from' field value is never
     * further in time than the 'from' date field.
     */
    events() {
        this.from.datepicker().on('changeDate', (e) => {
            var newDate;
            var startDate = new Date(e.date.valueOf()).getTime();
            var endDate = new Date(this.to.datepicker('getDate')).getTime();
            if (startDate > endDate) {
                newDate = new Date(e.date.valueOf());
                // jumps to the right selection when opening the datepicker
                this.to.datepicker('update', newDate);
                // changes the date (input)
                this.to.datepicker('setDate', newDate);
            }
        });
        this.to.datepicker().on('changeDate', (e) => {
            var newDate;
            var startDate = new Date(this.from.datepicker('getDate')).getTime();
            var endDate = new Date(e.date.valueOf()).getTime();
            if (startDate > endDate) {
                newDate = new Date(e.date.valueOf());
                // jumps to the right selection when opening the datepicker
                this.from.datepicker('update', newDate);
                // changes the date (input)
                this.from.datepicker('setDate', newDate);
            }
        });
    }


    /**
     * Set the sorting to given DataTables columns and directions.
     * @param {string} tableSelector:  e.g. 'table'
     * @param {array} sorting: e.g. [[2, 'desc', 0]] to sort descending on the
     * third column the last digit is 0 for 'desc' and 1 for 'asc' it's possible
     * to use multi-sort using: [[2, 'asc', 1], [1, 'desc', 0]]
     */
    setTableSorting(tableSelector, sorting) {
        var dTable, settings;
        if ($(tableSelector).dataTable) {
            dTable = $(tableSelector).dataTable();
            settings = dTable.fnSettings();
            settings.aaSorting = sorting;
        }
    }


    /**
     * The type allows you to specify how the data for this column will be sorted.
     * Four types (string, numeric, date and html (which will strip HTML tags
     * before sorting)) are currently available. Note that only date formats
     * understood by Javascript's Date() object will be accepted as type date.
     * @param {string} tableSelector: e.g. 'table'
     * @param {array} columns: e.g. [0,1] for first two columns
     * @param {string} sType: e.g. 'custom-date'
     */
    setTableSortingType(tableSelector, columns, sType) {
        var dTable, i, settings;
        if ($(tableSelector).dataTable) {
            dTable = $(tableSelector).dataTable();
            settings = dTable.fnSettings();
            for (i = 0; i < columns.length; i++) {
                settings.aoColumns[columns[i]].sType = sType;
            }
        }
    }
}


$(() => {app.list = new List();});

},{"../../lib/fixed_header":1,"./pagination":3,"./server_pagination":4}],3:[function(require,module,exports){
'use strict';


class Pagination {

    constructor(selector) {
        $.fn.dataTableExt.oApi.fnPagingInfo = function(oSettings) {
            return {
                iStart: oSettings._iDisplayStart,
                iEnd: oSettings.fnDisplayEnd(),
                iLength: oSettings._iDisplayLength,
                iTotal: oSettings.fnRecordsTotal(),
                iFilteredTotal: oSettings.fnRecordsDisplay(),
                iPage: Math.ceil( oSettings._iDisplayStart / oSettings._iDisplayLength ),
                iTotalPages: Math.ceil( oSettings.fnRecordsDisplay() / oSettings._iDisplayLength ),
            };
        };
        this.selector = selector;

        // Set the pagesize from a cookie, or use a sane default.
        let pagesize = $.cookie('pagesize');
        if (isNaN('' + pagesize) || parseInt(pagesize, 10) <= 0) {
            pagesize = 10;
            $.cookie('pagesize', pagesize, {path: '/'});
        }
        $('#pagesize').val(pagesize);

        if ($('#search-query').length) {
            if ($('#search-query').val().length > 0) {
                $('.js-input-clear-link').show();
            } else {
                $('.js-input-clear-link').hide();
            }
        }

        // Keeps track of columns that shouldn't be sortable.
        let dontSort = [];
        $('#js-paging_container table thead th').each((e) => {
            if ($(e.currentTarget).hasClass('no-sort')) {
                dontSort.push({'bSortable': false});
            } else {
                dontSort.push(null);
            }
        });

        // Set DataTable page from querystring.
        let page = parseInt(app.utils.getParameterByName('page'), 10);
        let displayStart = 0;
        if (!isNaN(page)) {
            displayStart = (page - 1) * pagesize;
        }

        this.datatables = $(this.selector).dataTable({
            sDom: 't',
            iDisplayLength: parseInt(pagesize, 10),
            aoColumns: dontSort,
            oLanguage: {
                sEmptyTable: context.i18n.emptyTable,
            },
            // Disables initial sort.
            aaSorting: [],
            iDisplayStart: displayStart,
            preDrawCallback: function(settings) {
                if (typeof(settings._drawHold) === 'undefined') {
                    let currentPage = parseInt($('#js-paging_container .js-pagination-active > a').html(), 10);
                    if (Number.isInteger(currentPage)) {
                        settings._iDisplayStart = (currentPage - 1) * settings._iDisplayLength;
                    }
                }
            },
        });
        // Filter the active page range, instead of empty placeholders.
        this.updateDTPaging();
        this.events();
    }


    events() {
        $('.js-input-clear-link').click(function(event) {
            $('#search-query').val('');
            $('.js-input-clear-link').hide();
        });

        $('.js-input-clear').bind('keyup paste change mouseup', function(event) {
            if ($('#search-query').val().length > 0) {
                $('.js-input-clear-link').show();
            } else {
                $('.js-input-clear-link').hide();
            }
        });

        $('#pagesize').change(function() {
            $.cookie('pagesize', $('#pagesize').val(), {path: '/'});
            if ($('#filterform').length) {
                $('#filterform').submit();
            } else {
                window.location.reload(true);
            }
        });

        // Add partner id and page to query string.
        $('.js-dt-page').click((e) => {
            let url = $(e.currentTarget).attr('href');
            // If partnerId is set, add it to the query string.
            if (typeof context.partnerId !== 'undefined') {
                url = app.utils.addQSParm(url, 'partner_id', context.partnerId);
            }
            // If the DataTable page is other than 1, add to the query string.
            let page = Math.ceil(this.datatables.fnPagingInfo().iStart / this.datatables.fnPagingInfo().iLength) + 1;
            if (page > 1) {
                url = app.utils.addQSParm(url, 'js-pagination-page', page);
            }
            window.location = url;
            e.preventDefault();
        });

        if (this.datatables.fnPagingInfo().iTotalPages > 1) {
            $('#js-paging_container .js-pagination-next').click(() => {
                if (this.datatables.fnPagingInfo().iPage < (this.datatables.fnPagingInfo().iTotalPages - 1)) {
                    this.datatables.fnPageChange('next');
                    this.updateDTPaging();
                }
            });
            $('#js-paging_container .js-pagination-previous').click(() => {
                if (this.datatables.fnPagingInfo().iPage > 0) {
                    this.datatables.fnPageChange('previous');
                    this.updateDTPaging();
                }
            });
            $('#js-paging_container .js-pagination-first').click(() => {
                this.datatables.fnPageChange('first');
                this.updateDTPaging();
            });
            $('#js-paging_container .js-pagination-last').click(() => {
                this.datatables.fnPageChange('last');
                this.updateDTPaging();
            });

            // Custom pagination click handler.
            $('.js-pagination-page').click((e) => {
                // This relies on the classnames on the pagination buttons,
                // which currently looks like `paginationpage p-<number>`.
                let page = parseInt($(e.currentTarget).attr('class').replace('vg-pagination-link js-pagination-page p', ''), 10);

                this.datatables.fnPageChange(this.datatables.fnPagingInfo().iPage + page);
                this.updateDTPaging();
            });
        } else {
            $('#js-paging_container .js-pagination').hide();
        }
    }


    /**
     * Interactive and obscure part of our custom pagination controls.
     */
    updateDTPaging() {
        let buttonsRemaining = 7;
        $('.js-pagination-page').parent().hide();
        $('#js-paging_container .js-pagination-active a').html(this.datatables.fnPagingInfo().iPage + 1);
        $('#js-paging_container a.js-pagination-last').html(this.datatables.fnPagingInfo().iTotalPages);

        if (this.datatables.fnPagingInfo().iPage !== 0) {
            $('.js-pagination-previous').parent().removeClass('disabled');
        } else {
            $('.js-pagination-previous').parent().addClass('disabled');
        }

        if ((this.datatables.fnPagingInfo().iPage + 1) !== this.datatables.fnPagingInfo().iTotalPages) {
            $('.js-pagination-next').parent().removeClass('disabled');
        } else {
            $('.js-pagination-next').parent().addClass('disabled');
        }

        if (this.datatables.fnPagingInfo().iPage >= 3 && this.datatables.fnPagingInfo().iTotalPages >= 7) {
            $('.js-pagination-first').parent().show();
            buttonsRemaining--;
        } else {
            $('.js-pagination-first').parent().hide();
        }

        if (this.datatables.fnPagingInfo().iPage >= 4 && this.datatables.fnPagingInfo().iTotalPages > 7) {
            $('.js-pagination-dots-first').parent().show();
        } else {
            $('.js-pagination-dots-first').parent().hide();
        }
        if ((this.datatables.fnPagingInfo().iPage <= this.datatables.fnPagingInfo().iTotalPages - 5) && this.datatables.fnPagingInfo().iTotalPages > 7) {
            $('.js-pagination-dots-last').parent().show();
        } else {
            $('.js-pagination-dots-last').parent().hide();
        }

        if ((this.datatables.fnPagingInfo().iPage <= this.datatables.fnPagingInfo().iTotalPages - 4) && this.datatables.fnPagingInfo().iTotalPages >= 7) {
            $('.js-pagination-last').parent().show();
            buttonsRemaining--;
        } else {
            $('.js-pagination-last').parent().hide();
        }

        for (let i = 1; i <= 5; i++) {
            // All page pagination buttons, except the first one.
            if (this.datatables.fnPagingInfo().iPage > (i - 1)) {
                if (--buttonsRemaining === 0) break;
                $('.p-' + i).html(this.datatables.fnPagingInfo().iPage - i + 1);
                $('.p-' + i).parent().show();
            }
            if (this.datatables.fnPagingInfo().iPage < (this.datatables.fnPagingInfo().iTotalPages - i)) {
                if (--buttonsRemaining === 0) break;
                $('.p' + i).html(this.datatables.fnPagingInfo().iPage + i + 1);
                $('.p' + i).parent().show();
            }
        }
    }
}

module.exports = Pagination;

},{}],4:[function(require,module,exports){
'use strict';


class Pagination {

    constructor() {
        // filterstuff
        var pagesize = $.cookie('pagesize');
        if (isNaN('' + pagesize) || parseInt(pagesize, 10) <= 0) {
            pagesize = 10;
            $.cookie('pagesize', pagesize, {path: '/'});
        }
        $('#pagesize').val(pagesize);
        $('#pagesize').change(function() {
            $.cookie('pagesize', $('#pagesize').val(), {path: '/'});
            if ($('#filterform').length) {
                $('#filterform').submit();
            } else {
                window.location.reload(true);
            }
        });
        $('js-input-clear-link').click(function(event) {
            $('#search-query').val('');
            $('js-input-clear-link').hide();
        });
        $('.js-input-clear').bind('keyup paste change mouseup', function(event) {
            if ($('#search-query').val().length > 0) {
                $('.js-input-clear-link').show();
            } else {
                $('.js-input-clear-link').hide();
            }
        });
        if ($('#search-query').length) {
            if ($('#search-query').val().length > 0) {
                $('.js-input-clear-link').show();
            } else {
                $('.js-input-clear-link').hide();
            }
        }

        // Add partner id to query string.
        $('.js-dt-page').click(function(event) {
            var url;
            event.preventDefault();
            url = $(this).attr('href');
            if (typeof partnerId !== 'undefined') {
                url = app.utils.addQSParm(url, 'partner_id', partnerId);
            }
            window.location = url;
        });

        //pagination stuff
        function isEnabled(button) {
            return !$(button).parent().hasClass('disabled');
        }

        $('#js-paging_container .js-pagination-first').click(function() {
            if (isEnabled(this)) {
                $('#hidden-page-number').val(0);
                $('#filterform').submit();
            }
        });
        $('#js-paging_container .js-pagination-previous').click(function() {
            if (isEnabled(this)) {
                $('#hidden-page-number').val(parseInt($('#hidden-page-number').val(), 10) - 1);
                $('#filterform').submit();
            }
        });
        $('#js-paging_container .js-pagination-next').click(function() {
            if (isEnabled(this)) {
                $('#hidden-page-number').val(parseInt($('#hidden-page-number').val(), 10) + 1);
                $('#filterform').submit();
            }
        });
        $('#js-paging_container .js-pagination-last').click(function() {
            if (isEnabled(this)) {
                $('#hidden-page-number').val(context.numberOfPages);
                $('#filterform').submit();
            }
        });
        $('#js-paging_container .js-pagination-page').click(function() {
            if (isEnabled(this)) {
                $('#hidden-page-number').val($(this).html());
                $('#filterform').submit();
            }
        });
    }
}

module.exports = Pagination;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

//# sourceMappingURL=data:application/json;base64,
